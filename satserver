#!/usr/bin/python

import SocketServer
import optparse
import sys
import array
import struct

LOCAL_ADDRESS = "localhost"
LOCAL_PORT = 13337

from common import CNFFormula

from solvers import PortfolioSolver
from solvers import ExternalSolver

from optparse import OptionParser

_solverPaths = []

def printBenchmark(benchmark, outputFile = sys.stdout):
    outputFile.write("vars: %d clauses: %d => %s [%.3fs]\n" % (benchmark.varCount,
                                                             benchmark.clauseCount,
                                                             ("UNSAT", "SAT")[benchmark.sat],
                                                             benchmark.time))
    
def emitBinaryBenchmark(benchmark, outputFile):
    repr = struct.pack("IIbd", benchmark.varCount, benchmark.clauseCount,
                       benchmark.sat, benchmark.time)
    
    outputFile.write(repr)

def parseBinaryFormula(inputFile):
    # Read the number of variables and clauses
    hdrArray = array.array('I')
    hdrArray.fromstring(inputFile.read(4*2))
    
    hdr = hdrArray.tolist()
    
    varCount = hdr[0]
    clauseCount = hdr[1]
    
    formula = CNFFormula(varCount)
    
    # Read each clause
    i = 0
    while i < clauseCount:
        litArray = array.array('i')
        litArray.fromstring(inputFile.read(4*1))
        
        # The first element indicates the number of literals in the clause
        litCount = litArray.tolist()[0]
        
        litArray.fromstring(inputFile.read(4*litCount))
        
        clause = []
        for lit in litArray.tolist()[1:]:
            assert lit != 0
            
            if lit > 0:
                clause.append((lit, False))
            else:
                clause.append((-lit, True))
                
        formula.clauses.append(clause)
        
        i = i + 1
        
    return formula

def emitBinarySolution(outputFile, solution, benchmark = None):
    solArray = array.array('i')
    
    if len(solution) == 0:
        solArray.append(0)
        outputFile.write(solArray.tostring())
        return
    
    solArray.append(1)
    solArray.append(len(solution))
    
    for elem in solution:
        value = elem[0]
        if elem[1]:
            value = -value
            
        solArray.append(value)
        
    if benchmark is not None:
        solArray.append(len(benchmark))
        
    outputFile.write(solArray.tostring())
            
    if benchmark is not None:
        for b in benchmark:
            emitBinaryBenchmark(b, outputFile)
        

def createPortfolioSolver():
    solvers = []
    
    for path in _solverPaths:
        solvers.append(ExternalSolver(path))
        
    portfolio = PortfolioSolver(solvers, _benchMode)
    
    return portfolio

class ServerHandler(SocketServer.StreamRequestHandler):
    def handle(self):
        formula = parseBinaryFormula(self.rfile)
        
        solver = createPortfolioSolver()
        
        solution = solver.solve(formula)
        
        if _benchMode:
            print 80*"="
            
            for benchmark in solver.getBenchmark():
                printBenchmark(benchmark)
        else:
            printBenchmark(solver.getBenchmark())    
        
        emitBinarySolution(self.wfile, solution)
        

def main():
    parser = OptionParser()
    parser.add_option("-s", "--solver", action="append", dest="solver_paths")
    parser.add_option("-b", "--benchmark", action="store_true", dest="benchmark", default=False)
    
    (options, args) = parser.parse_args()
    
    if options.solver_paths is None:
        sys.stderr.write("You need to specify at least one solver.\n")
        exit(1)
        
    global _solverPaths
    _solverPaths = options.solver_paths
    
    global _benchMode
    _benchMode = options.benchmark
    
    server = SocketServer.TCPServer((LOCAL_ADDRESS, LOCAL_PORT), ServerHandler)
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print "Server stopped."

if __name__ == "__main__":
    main()
